# Generated by Django 4.2.20 on 2025-03-21 19:23

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserLoginDetailsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=255, null=True)),
                ('password', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=255, null=True)),
                ('last_name', models.CharField(max_length=255, null=True)),
                ('user_category', models.CharField(blank=True, choices=[('owner', 'owner'), ('chairman', 'chairman'), ('ceo', 'ceo'), ('director', 'director'), ('genmanager', 'genmanager'), ('admin', 'admin'), ('staff', 'staff'), ('guest', 'guest')], default='guest', max_length=100, null=True)),
                ('customurlslug', models.SlugField(blank=True, max_length=500, null=True, unique=True)),
                ('url_unique_id', models.CharField(blank=True, max_length=100, null=True)),
                ('usercompany', models.CharField(blank=True, max_length=500, null=True)),
                ('userdivision', models.CharField(blank=True, max_length=500, null=True)),
                ('userbranch', models.CharField(blank=True, max_length=500, null=True)),
                ('userdepartment', models.CharField(blank=True, max_length=500, null=True)),
                ('fullNames', models.CharField(blank=True, default='User Full Names', max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('can_do_all', models.BooleanField(default=False, verbose_name='Can do all')),
                ('can_add', models.BooleanField(default=False, verbose_name='Can add')),
                ('can_edit', models.BooleanField(default=False, verbose_name='Can edit')),
                ('can_view', models.BooleanField(default=False, verbose_name='Can view')),
                ('can_delete', models.BooleanField(default=False, verbose_name='Can delete')),
                ('can_access_all', models.BooleanField(default=False, verbose_name='Can access all')),
                ('can_access_related', models.BooleanField(default=False, verbose_name='Can access only related')),
                ('allifmaal_admin', models.BooleanField(default=False, verbose_name='Can access all')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
